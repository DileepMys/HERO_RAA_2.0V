/*============================================================================
**
**                     CONFIDENTIAL VISTEON CORPORATION
**
** This is an unpublished work of authorship, which contains trade secrets,
** created in 2003. Visteon Corporation owns all rights to this work and
** intends to maintain it in confidence to preserve its trade secret status.
** Visteon Corporation reserves the right, under the copyright laws of the
** United States or those of any other country that may have  jurisdiction,
** to protect this work as an unpublished work, in the event of an
** inadvertent or deliberate unauthorized publication. Visteon Corporation
** also reserves its rights under all copyright laws to protect this work as
** a published work, when appropriate. Those having access to this work may
** not copy it, use it, modify it or disclose the information contained in
** it without the written authorization of Visteon Corporation.
**
**============================================================================
**
**  Name:               fuel03.cf$
**
**  Description:        This file contains a description of the macros that
**                      are used to configure the fuel filter algorithm (FUEL0).
**
**  Organization:       Driver Information Software Section,
**                      DI Core Engineering Department
**
**==========================================================================*/

/*============================================================================
**                         O V E R V I E W
**==========================================================================*/
/*
** The intent of this code is to provide a configurable fuel filter
** algorithm for use in a variety of instrument cluster applications.
**
** Requirements for this code package are detailed in the
** Fuel Algorithm Bookshelf Design Specification (BDS) 4FA1-1A306-CA.
**
**
** Many of the constants defined below are calculated based on the
** expected iteration rate of the filter(s).  On hardwired systems, this
** value is a fixed interval defined by the application, and will normally
** be in the 100ms range.  On network systems, this value is based on
** the rate at which messages are received, and will normally be 133ms
** for SCP based systems.
**
** Also, many of the constants below are defined in SCP percent full units,
** which is defined as 1 byte, 0-255.  Zero represents a 0% full tank, and
** 254 represents a 99.60% (254/255) percent full tank.  The value 255 is
** reserved to indicate a fault.  When a constant defined in terms of
** SCP percent full units is 2 bytes or 4 bytes, the most significant byte
** (unless otherwise noted) represents the SCP percent full unit.  The
** other bytes represent a remainder portion of the data.
**==========================================================================*/

/*============================================================================
**                         I N C L U D E   F I L E S
**==========================================================================*/

/*-------------------------------------------------------------------------*/
/* Define the following if Fuel03 Auto Configuration Generated file
   fuel03_bds.cfg is included for the project.  */
/*-------------------------------------------------------------------------*/
/*#define FUEL03_BDS_CFG  */

/*-------------------------------------------------------------------------*/
#ifdef  FUEL03_BDS_CFG
#include "fuel03_bds.cfg"
#else

#include "ffuel.h"
/*============================================================================
**
**               T A N K   I N D E P E N D E N T   C O N S T A N T S
**
**============================================================================
** The following constants are defined by the BDS.
**==========================================================================*/
/* ----------------------------------------------------------------------------------
** If your product has more than one fuel tank configuration that is
** chosen via SCEM (i.e. NVM), define the following macro to the
** number of tanks.  The only valid values are from 2 to 10.  If
** your product does not have more than one fuel tank, comment out the
** definition.
**
** If you have multiple tanks, you must define all of the constants
** from here to the end of this file.  If you don't have multiple
** tanks, you can comment them out.
**
** ----------------------------------------------------------------------------------
*/
#define FUEL03_SCEM_NUMBER_OF_FUEL_TANKS (1)

#if (FUEL03_SCEM_NUMBER_OF_FUEL_TANKS == 1)
#undef FUEL03_SCEM_NUMBER_OF_FUEL_TANKS
#endif
/* ----------------------------------------------------------------------------------
** Define the type of average to use.
** 0 = No Avg, 1 = Moving Average, 2 = Avg w/faults, 3 = Avg w/o faults
** ----------------------------------------------------------------------------------
*/
#define FUEL03_AVG_TYPE    (0)
/* ----------------------------------------------------------------------------------
** Set the following to the number of 'errors' that need to occur before
** the fuel data is logged to NVM.
** ----------------------------------------------------------------------------------
*/
#define FUEL03_ERR_CNT                                    (500)

/* ----------------------------------------------------------------------------------
** Define the following if you want fast fill enabled.  Otherwise, comment
** it out.
**
** This constant will be stored in bit position FAST_FILL_ENABLE_BIT (0x40)
** of 1 byte of NVM called Fuel02OptionsNVM.
** ----------------------------------------------------------------------------------
*/
#define FUEL03_FAST_FILL_ENABLE

/* ----------------------------------------------------------------------------------
** Define the following if you want the fast fill recovery filter jam feature enabled.
** Otherwise, comment it out.
** ----------------------------------------------------------------------------------
*/
#define FUEL03_FF_RECOV_FLTR_JAM_ENABLE

/* ----------------------------------------------------------------------------------
** Define the following if you want the Honda fast fill rate check enabled.
** Otherwise, comment it out.
** ----------------------------------------------------------------------------------
*/
/*#define FUEL03_FFRC_ENABLE*/

/* ----------------------------------------------------------------------------------
** Set the following to 1 if you want the feature enabled, otherwise a 0 will
** disable it.
** ----------------------------------------------------------------------------------
*/
#define FUEL03_FORCE_FILT_JAM                             (0)

/* ----------------------------------------------------------------------------------
** Define the following if you want hill hold enabled.  Otherwise, comment
** it out.
**
** This constant will be stored in 1 bit of 1 byte of NVM called
** "Fuel02OptionsNVM".  The bit position will be defined in FUEL03.C as
** "HILL_HOLD_ENABLE_BIT".
** ----------------------------------------------------------------------------------
*/
/*#define FUEL03_HILL_HOLD_ENABLE*/

/* ----------------------------------------------------------------------------------
** Define the time period after power stabilization during which to take
** fuel init samples.  Once this time period has expired, a one-time
** fuel init will take place.  The time base for this counter will be the
** same as that chosen for the filter rate, and the counter should be long
** enough to ensure that a good quantity of init samples will be taken.
**
** This constant will be stored in 1 byte of NVM called "Fuel02InitDelayCountNVM".
** ----------------------------------------------------------------------------------
*/
/*
** For SGM308, the fuel filter rate is 96ms, therefore this time is
** 4*96 = 384ms, and 4 samples will be taken.  The total
** init time will be 384ms + 576ms(6*96) = 960ms.
*/
#define FUEL03_INIT_DELAY_COUNT_TIME (6)

/* ----------------------------------------------------------------------------------
** Define the number of good samples required at fuel init in order to
** test for a filter jam.
**
** This constant will be stored in 1 byte of NVM called "Fuel02'InitGoodSamplesReqNVM".
** ----------------------------------------------------------------------------------
*/
#define FUEL03_INIT_GOOD_SAMPLES_REQUIRED (4)

/* ----------------------------------------------------------------------------------
** Set the JPM fault delay time.
** ----------------------------------------------------------------------------------
*/
#define FUEL03_JPM_FAULT_DELAY_TIME (600)

/* ----------------------------------------------------------------------------------
** Define the maximum allowed key-off sampling time (in units of the
** filter iteration rate).
**
** This constant will be stored in 2 bytes of NVM called "Fuel02KeyOffSampleTimeNVM".
** ----------------------------------------------------------------------------------
*/
/* SGM308: No Key off sample time */
#define FUEL03_KEY_OFF_SAMPLE_TIME (0)

/* ----------------------------------------------------------------------------------
** Define the time period after the ignition switch has transitioned into
** RUN before fuel init samples are to be taken.  The time base for this
** counter will be the same as that chosen for the filter rate, and
** the counter should be long enough to ensure that any power fluctuations
** have stabilized enough to get good samples.  Consult the hardware
** engineer to determine the appropriate value.
**
** This constant will be stored in 1 byte of NVM called "Fuel02KeyOnDelayCounterNVM".
** ----------------------------------------------------------------------------------
*/
/*
** for SGM308, the fuel filter rate is 96ms, therefore the key ON delay time is
** configutred as 480ms (5*96 =480ms).
*/
#define FUEL03_KEY_ON_DELAY_TIME (5)

/* ----------------------------------------------------------------------------------
** Define the following for Key Off Convergence (FUEL03_REF_AVG_TYPE=4).
** If you don't use KOC, then and value is ok wince it won't be used.
** ----------------------------------------------------------------------------------
*/
/*#define FUEL03_KOS_COUNTS  (5)*/

/* ----------------------------------------------------------------------------------
** Define the following for Key Off Convergence (FUEL03_REF_AVG_TYPE=4).
** If you don't use KOC, then and value is ok wince it won't be used.
** ----------------------------------------------------------------------------------
*/
/*#define FUEL03_KOS_CYCLES  (4)*/

/* ----------------------------------------------------------------------------------
** Define the following for Key Off Convergence (FUEL03_REF_AVG_TYPE=4).
** If you don't use KOC, then and value is ok wince it won't be used.
** ----------------------------------------------------------------------------------
*/
/*#define FUEL03_KOS_MIN_SMPLS (20)*/

/* ----------------------------------------------------------------------------------
** Define the number of rate check samples used in the fast fill rate check feature.
** This is needed if you enable FUEL03_FFRC_ENABLE.
** ----------------------------------------------------------------------------------
*/
/*#define FUEL03_MAX_RATE_CHECK_SAMPLES (5)*/

/* ----------------------------------------------------------------------------------
** Ratioed A/D values GREATER than the following are considered open.
** Setting this value to "ffff" will effectively stop open detect.
**
** This constant will be stored in 2 bytes of NVM called "Fuel02A2DOpenLimNVM".
** ----------------------------------------------------------------------------------
*/
#define FUEL03_OPEN_SENDER_LIMIT (121)

/* ----------------------------------------------------------------------------------
** Define the time period for debouncing a open/short sender.  The time base for
** these counters will be the same as that chosen for the filter rate.
**
** This constant will be stored in 2 bytes of NVM called "Fuel02FaultCounterNVM".
** ----------------------------------------------------------------------------------
*/
/*
** For SGM308, the fuel filter rate is 96ms, therefore the fault time is
** configutred as 33 sec (21*96 =2016ms).
*/
#define FUEL03_OPEN_SHORT_FAULT_TIME (21)

/* ----------------------------------------------------------------------------------
** Define the time period for recovering from an open/short sender.  The time base for
** these counters will be the same as that chosen for the filter rate.
**
** This constant will be stored in 2 bytes of NVM called "Fuel02FaultRecoveryCounterNVM".
** ----------------------------------------------------------------------------------
*/
/*
** For SGM308, the fuel filter rate is 96ms, therefore the fault time is
** configutred as 33 sec (21*96 =2016ms).
*/
#define FUEL03_OPEN_SHORT_RECOVERY_TIME (21)

/* ----------------------------------------------------------------------------------
** Define the number of rate check start timer used in the fast fill rate check feature.
** This is needed if you enable FUEL03_FFRC_ENABLE.
** ----------------------------------------------------------------------------------
*/
/*#define FUEL03_RATE_CHECK_TIMER_START_VALUE (10)*/

/* ----------------------------------------------------------------------------------
** Define the type of reference average to use.
** 0 = No average
** 1 = Moving Average
** 2 = Set with faults
** 3 = Set without faults
** 4 = Convergence
** ----------------------------------------------------------------------------------
*/
#define FUEL03_REF_AVG_TYPE    (0)

/* ----------------------------------------------------------------------------------
** Ratioed A/D values LESS than the following are considered shorted.
** Setting this value to "0" will effectively stop short detect.
**
** This constant will be stored in 2 bytes of NVM called "Fuel02A2DShortLimNVM".
** ----------------------------------------------------------------------------------
*/
#define FUEL03_SHORTED_SENDER_LIMIT (866)

/* ----------------------------------------------------------------------------------
** Define the number of fuel samples to average if the FUEL03_AV_TYPE is
** greater than 0. If you set FUEL03_AVG_TYPE to 0 for no average, then you
** can put anything in this value but it is required. Set it to 1  in this case.
** ----------------------------------------------------------------------------------
*/
#define FUEL03_SMPLS_2_AVG (1)

/* ----------------------------------------------------------------------------------
** Define the rate at which the zero speed counter is to be incremented:
** This constant times the rate of the fuel filter algorithm will define
** the time after zero speed at which to store the A/D sample for init
** and fast fill purposes.
**
** This constant will be stored in 2 bytes of NVM called "Fuel02ZeroSpeedCounterNVM".
** ----------------------------------------------------------------------------------
*/

/*
** For SGM308, the fuel filter rate is 96ms, therefore the Zero speed counter time is
** configutred as 10 sec (104*96 =9984ms).
*/
#define FUEL03_ZERO_SPEED_COUNTER (104)   /* was (200u) but changed for testing */

/* ----------------------------------------------------------------------------------
** Define the following 3 values for the fast fill key off convergence.
** ----------------------------------------------------------------------------------
*/
/*
#define FUEL03_ZS_COUNTS  (50)
#define FUEL03_ZS_CYCLES  (5)
#define FUEL03_ZS_MIN_SMPLS (20)
*/
/* ----------------------------------------------------------------------------------
** Define the following if the Zero Speed Reference is required.
** If this is defined, the FUEL03_ZSS_REF_ONLY_BIT (0x20) in Fuel02OptionsNVM
** is set.
** Comment it out or delete it all together if you don't need it.
** ----------------------------------------------------------------------------------
*/
/*#define FUEL03_ZSS_REF_ONLY*/

/* ----------------------------------------------------------------------------------
** Define the "adjustment" factor that is added to the least significant
** word of the 4 byte fuel filter whenever consecutive samples of the fuel
** A/D fall on the same side of the filter.  This value is used when the
** filter is running in "fast" mode, and can be set to "0" if no adjustment
** is desired.
**
** For example, if two samples in a row fall below the current filter value,
** this constant will be subtracted from the filter along with the delta
** value defined above.  Three samples mean that twice this value is
** subtracted, and so on.  Whenever a sample on the opposite side of the
** filter is encountered, the number of adjustment factors to be added
** is reset to zero.
**
** ----------------------------------------------------------------------------------
*/
#define FUEL03_DELTA_FAST_ADJUST_A (0x0000)

/*#define FUEL03_DELTA_FAST_ADJUST_A { 0x0000, 0x0000, 0x0000 }*/


/* ----------------------------------------------------------------------------------
** Define the base delta value to be added/subtracted from the 4 byte
** fuel filter when it is appropriate to iterate it.  This value
** more or less determines the "rate" at which the filter moves, and
** is the value used when the filter is running in "fast" mode of
** operation.  It can be set to the same value as the "normal"
** mode base if "fast" mode is not desired.
**
** This constant will be stored in 4 bytes of NVM called "Fuel02FastFillBaseNVM".
** ----------------------------------------------------------------------------------
*/
/* TBD */
#define FUEL03_DELTA_FAST_BASE_A 40265318uL
/*#define FUEL03_DELTA_FAST_BASE_A { 90980923uL, 90980923uL, 90980923uL }*/


/* ----------------------------------------------------------------------------------
** Define a max clamp value for the fuel delta when in fast mode.
** ----------------------------------------------------------------------------------
*/
#define FUEL03_DELTA_FAST_CLAMP_A (0x00FFFFFFuL) /*(0x00FFFFFFuL) changed for UT */

/*#define FUEL03_DELTA_FAST_CLAMP_A {0x00F10000uL, 0x00F10000uL, 0x00F10000uL}*/


/* ----------------------------------------------------------------------------------
** Define the "adjustment" factor that is added to the least significant
** word of the 4 byte fuel filter whenever consecutive samples of the fuel
** A/D fall on the same side of the filter.  This value is used when the
** filter is running in "normal" mode, and can be set to "0" if no adjustment
** is desired.
**
** For example, if two samples in a row fall below the current filter value,
** this constant will be subtracted from the filter along with the delta
** value defined above.  Three samples mean that twice this value is
** subtracted, and so on.  Whenever a sample on the opposite side of the
** filter is encountered, the number of adjustment factors to be added
** is reset to zero.
**
** This constant will be stored in 2 bytes of NVM called "NormalFillAdjNVM".
** ----------------------------------------------------------------------------------
*/
#define FUEL03_DELTA_NORMAL_ADJUST_A (0)

/*#define FUEL03_DELTA_NORMAL_ADJUST_A {356, 356, 356 }*/

/* ----------------------------------------------------------------------------------
** Define the base delta value to be added/subtracted from the 4 byte
** fuel filter when it is appropriate to iterate it.  This value
** more or less determines the "rate" at which the filter moves, and
** is the value used when the filter is running in "normal" mode of
** operation.
**
** This constant will be stored in 4 bytes of NVM called "NormalFillBaseNVM".
** ----------------------------------------------------------------------------------
*/

/*TBD*/
#define FUEL03_DELTA_NORMAL_BASE_A 223696ul /*236745ul*/

/*#define FUEL03_DELTA_NORMAL_BASE_A {243829uL, 243829uL, 243829uL }*/


/* ----------------------------------------------------------------------------------
** Define a max clamp value for the fuel delta when in normal mode.
** ----------------------------------------------------------------------------------
*/
#define FUEL03_DELTA_NORMAL_CLAMP_A (0x00FFFFFFuL) /*(0x00FFFFFFuL) changed for UT */

/*#define FUEL03_DELTA_NORMAL_CLAMP_A {0x00F10000uL, 0x00F10000uL, 0x00F10000uL }*/


/* ----------------------------------------------------------------------------------
** Define the key off convergence delta
** ----------------------------------------------------------------------------------
*/
#define FUEL03_KO_DELTA_A  (0)

/*#define FUEL03_KO_DELTA_A  { 6, 6, 6 }*/

/* ----------------------------------------------------------------------------------
** If you define FUEL03_FFRC_ENABLE, then set the sample timer reset
** value. This sets the number of fuel filter iterations before the fuel a/d sample
** is evaluated. For instance, if your fuel filter processing is every .1 seconds and
** you want the fill rate check to sample every 1 second, set this value to
** (1 sec / .1 sec) = 10.
**
** Set the FUEL03_MAX_RATE_CHECK_SAMPLES value to the number of samples you want
** the evaluation to covert.
**
** ----------------------------------------------------------------------------------
*/
/*#define FUEL03_LOWER_RATE_CHECK_LIMIT_A (1)*/

/*#define FUEL03_LOWER_RATE_CHECK_LIMIT_A { 1, 1, 1 }*/


/* ----------------------------------------------------------------------------------
** Define the minimum delta increase ( >= ) in percent full terms used as one
** of the entrance conditions to "fast" fill mode.  This value could be
** set to a very large number as one method to inhibit fast fill mode.
**
** This constant will be stored in 1 byte of NVM called "Fuel02NegativeFastFill_x_NVM".
**
** Use _ARRAY construct if FUEL03_SCEM_NUMBER_OF_FUEL_TANKS is used.
** ----------------------------------------------------------------------------------
*/
#define FUEL03_NEGATIVE_FAST_FILL_DELTA_A (18) /*(255)*/
/*#define FUEL03_NEGATIVE_FAST_FILL_DELTA_A { 50, 50, 50 }*/

/* ----------------------------------------------------------------------------------
** Define the minimum delta decrease ( >= ) in percent full terms that must
** be detected during fuel init to jam the fuel filter.
**
** This constant will be stored in 1 byte of NVM called "Fuel02NegativeInitFill_x_NVM".
**
** Use _ARRAY construct if FUEL03_SCEM_NUMBER_OF_FUEL_TANKS is used.
** ----------------------------------------------------------------------------------
*/
#define FUEL03_NEGATIVE_INIT_FILL_DELTA_A (18) /*(255)*/
/*#define FUEL03_NEGATIVE_INIT_FILL_DELTA_A { 33, 33, 33 }*/



/* ----------------------------------------------------------------------------------
** Define the minimum delta decrease ( >= ) in percent full terms that
** the percent full value must change by in response to a filter change.
**
** By setting this constant to 0 or 1, there will effectively be
** no hysteresis applied.
**
** This constant will be stored in 2 bytes of NVM called "Fuel02PercentFullNegHystNVM".
** ----------------------------------------------------------------------------------
*/
/* Added the hyserisis value with 0.5 % duty as an acceptable tolerence */
#define FUEL03_PERCENT_FULL_NEGATIVE_HYST (0) /*(1)*/

/*#define FUEL03_PERCENT_FULL_NEGATIVE_HYST { 5, 5, 5 }*/


/* ----------------------------------------------------------------------------------
** Define the minimum delta increase ( >= ) in percent full terms that
** the percent full value must change by in response to a filter change.
**
** By setting this constant to 0 or 1, there will effectively be
** no hysteresis applied.
**
** This constant will be stored in 2 bytes of NVM called "Fuel02PercentFullPosHystNVM".
** ----------------------------------------------------------------------------------
*/
/* Added the hyserisis value with 0.5 % duty as an acceptable tolerence */
#define FUEL03_PERCENT_FULL_POSITIVE_HYST (0) /*(2560)*/

/*#define FUEL03_PERCENT_FULL_POSITIVE_HYST { 5, 5, 5 }*/


/* ----------------------------------------------------------------------------------
** Define the minimum delta increase ( >= ) in percent full terms used as one
** of the entrance conditions to "fast" fill mode.  This value could be
** set to a very large number as one method to inhibit fast fill mode.
**
** This constant will be stored in 1 byte of NVM called "Fuel02PositiveFastFillNVM".
**
** Use _ARRAY construct if FUEL03_SCEM_NUMBER_OF_FUEL_TANKS is used.
** ----------------------------------------------------------------------------------
*/
#define FUEL03_POSITIVE_FAST_FILL_DELTA_A (18)
/*#define FUEL03_POSITIVE_FAST_FILL_DELTA_A {  33, 33, 33 }*/


/* ----------------------------------------------------------------------------------
** Define the minimum delta increase ( >= ) in percent full terms that must
** be detected during fuel init to jam the fuel filter.
**
** This constant will be stored in 1 byte of NVM called "Fuel02PositiveInitFillNVM".
**
** Use _ARRAY construct if FUEL03_SCEM_NUMBER_OF_FUEL_TANKS is used.
** ----------------------------------------------------------------------------------
*/
#define FUEL03_POSITIVE_INIT_FILL_DELTA_A (18)

/*#define FUEL03_POSITIVE_INIT_FILL_DELTA_A { 18, 18, 18 }*/


/* ----------------------------------------------------------------------------------
** Define the secondary delta fast fill positive and negative values.
**
** Use _ARRAY construct if FUEL03_SCEM_NUMBER_OF_FUEL_TANKS is used.
** ----------------------------------------------------------------------------------
*/
#define FUEL03_SEC_POS_INIT_FILL_DELTA_A (18)
/*#define FUEL03_SEC_POS_INIT_FILL_DELTA_A { 73, 73, 73 }*/
#define FUEL03_SEC_NEG_INIT_FILL_DELTA_A (18)
/*#define FUEL03_SEC_NEG_INIT_FILL_DELTA_A { 73, 73, 73 }*/


/* ----------------------------------------------------------------------------------
** For dual sender systems, declare a fault if the filtered percent full
** of SenderA is < FUEL03_SENDERA_ERROR and that of the SenderB is > FUEL03_SENDERB_ERROR.
**
** These constants are store in NVM called
** "Fuel02SenderAErrorNVM" and "Fuel02SenderBErrorNVM" respectively.
**
** Use _ARRAY construct if FUEL03_SCEM_NUMBER_OF_FUEL_TANKS is used.
** ----------------------------------------------------------------------------------
*/
#define FUEL03_SENDERA_ERROR  (6)
/*#define FUEL03_SENDERA_ERROR { 6, 6, 6}*/

/* ----------------------------------------------------------------------------------
** Define the fill check to use for rental car topoff.  If the MSB of
** the fuel filter exceeds the above threshold by this amount, the
** fuel filter will be jammed.
**
** By setting this value to 0xFF, rental car topoff will be disabled.
**
** These constants will be stored in 1 byte of NVM called
** "Fuel02SenderA_RCFillDeltaNVM" and "Fuel02SenderB_RCFillDeltaNVM".
** ----------------------------------------------------------------------------------
*/
#define FUEL03_SENDERA_RC_FILL_DELTA (0xFF) /*(0xFF)*/

/*#define FUEL03_SENDERA_RC_FILL_DELTA { 5, 5, 5 }*/


/* ----------------------------------------------------------------------------------
** Define the threshold at which to check for rental car topoff.   The
** MSB of the fuel filter must exceed this threshold before a check will
** take place.
**
** By setting this value to 0xFF, rental car topoff will be disabled.
**
** These constants will be stored in 1 byte of NVM called
** "Fuel02SenderA_RCFillThresholdNVM" and "Fuel02SenderB_RCFillThresholdNVM".
** ----------------------------------------------------------------------------------
*/
#define FUEL03_SENDERA_RC_FILL_THRESHOLD (0xFF) /*(0xFF)*/

/*#define FUEL03_SENDERA_RC_FILL_THRESHOLD { 240, 240, 240 }*/


/* ----------------------------------------------------------------------------------
** For dual sender systems, define the weighting for the SenderA and SenderB.
**
** Note that (w1+w2)/256 must be 1 or the weights are invalid.
**
** These constants are stored in NVM called
** "Fuel02SenderAWeightNVM" and "Fuel02SenderBWeightNVM" respectively.
**
** Use _ARRAY construct if FUEL03_SCEM_NUMBER_OF_FUEL_TANKS is used.
** ----------------------------------------------------------------------------------
*/
#define FUEL03_SENDERA_WEIGHT (128)
/*#define FUEL03_SENDERA_WEIGHT { 128, 128, 128 }*/

/* ----------------------------------------------------------------------------------
** Define the four byte slosh filter empty preload.  This value is stored
** in the slosh filter during a cold init, and is the filter value that will end
** up being used if the fuel init fails.
**
** This constant is in SCP percent full units.
** ----------------------------------------------------------------------------------
*/
#define FUEL03_SLOSH_FILTER_EMPTY_PRELOAD_A (0x00000000uL)

/*#define FUEL03_SLOSH_FILTER_EMPTY_PRELOAD_A {0x0C000000uL, 0x0C000000uL, 0x0C000000uL }*/


/* ----------------------------------------------------------------------------------
** If you define FUEL03_FFRC_ENABLE, then set the upper rate check limit.
** ----------------------------------------------------------------------------------
*/
/*#define FUEL03_UPPER_RATE_CHECK_LIMIT_A (20)*/

/*#define FUEL03_UPPER_RATE_CHECK_LIMIT_A { 20, 20, 20 }*/


/* ----------------------------------------------------------------------------------
** Define the zero speed delta limits.
** ----------------------------------------------------------------------------------
*/
#define FUEL03_ZS_DELTA_A  (6)

/*#define FUEL03_ZS_DELTA_A { 6, 6, 6, }*/
/* ----------------------------------------------------------------------------------
** Define the table to convert from the 5 bits of the B&A SCEM byte into an
** index that is used by FUEL03 to determine which entry in the various
** configuration parameter arrays are active.
** Define the rows according to the FUEL03_SCEM_NUMBER_OF_FUEL_TANKS.
** The table is a 1 byte input SCEM byte with a 1 byte output index value.
**----------------------------------------------------------------------------------
*/
/*#define FUEL03_INDEX_TABLE   \
  {  1, 0  }, \
  {  2, 1  }, \
  {  4, 2  }, \
  {  8, 3  }, \
  { 16, 4  }
*/

/* ----------------------------------------------------------------------------------
** Define the table to convert the SENDERA from A/D to percent full.
**
** This table is stored in Sender_A_TableNVM.
**
** This is used if FUEL03_SCEM_NUMBER_OF_FUEL_TANKS is not defined.
** ----------------------------------------------------------------------------------
*/
#ifdef FUEL03_SCEM_NUMBER_OF_FUEL_TANKS
	    #define FUEL03_SENDER_A_AD_TO_PF_TBL_SIZE (8)
	    #define FUEL03_SENDER_A_AD_TO_PF_TBL	\
	      {  826, 59872u      },  	/* 	254*256*100%	*/ \
	      {  735, 52429u      }, 	/* 	254*256*86%  	*/ \
	      {  651, 47794u      },  	/* 	254*256*75%		*/ \
	      {  549, 40539u      }, 	/* 	254*256*64%		*/\
	      {  470, 31832u      }, 	/* 	254*256*53%		*/\
	      {  398, 25278u      }, 	/* 	254*256*42%		*/\
	      {  327, 19193u      },	/* 	254*256*31%		*/\
	      {  263, 0u          }		/* 	254*256*0%		*/\
#endif 
/* ----------------------------------------------------------------------------------
** The following tables are for multiple tanks, i.e. FUEL03_SCEM_NUMBER_OF_FUEL_TANKS > 1
** ----------------------------------------------------------------------------------
*/
#ifdef FUEL03_SCEM_NUMBER_OF_FUEL_TANKS
#define FUEL03_SENDER_A_AD_TO_PF_TBL_SIZE (20)
#define FUEL03_SENDER_A_AD_TO_PF_TBL   \
{ \
  {   9u*256u, 254u*256u      }, /* Min/max */  \
  {   9u*256u, 246u*256u      }, /* Short Threshold */  \
  {  22u*256u, 233u*256u      }, /* Full */     \
  {  36u*256u, 219u*256u      },                \
  {  49u*256u, 206u*256u      },                \
  {  62u*256u, 193u*256u      },                \
  {  75u*256u, 180u*256u      }, /* 3/4 */      \
  {  87u*256u, 168u*256u      },                \
  {  99u*256u, 156u*256u      },                \
  { 110u*256u, 145u*256u      },                \
  { 121u*256u, 134u*256u      }, /* 1/2 */      \
  { 138u*256u, 117u*256u      },                \
  { 153u*256u, 102u*256u      },                \
  { 163u*256u,  87u*256u      },                \
  { 182u*256u,  73u*256u      }, /* 1/4 */      \
  { 190u*256u,  65u*256u      },                \
  { 199u*256u,  56u*256u      }, /* 1/8 */      \
  { 219u*256u,  36u*256u      },                \
  { 243u*256u,  12u*256u      }, /* Empty */    \
  { 254u*256u,   0u*256u      }  /* Open Threshold */ \
}, \
{ \
  {   9u*256u, 254u*256u      }, /* Min/max */  \
  {   9u*256u, 246u*256u      }, /* Short Threshold */  \
  {  22u*256u, 233u*256u      }, /* Full */     \
  {  36u*256u, 219u*256u      },                \
  {  49u*256u, 206u*256u      },                \
  {  62u*256u, 193u*256u      },                \
  {  75u*256u, 180u*256u      }, /* 3/4 */      \
  {  87u*256u, 168u*256u      },                \
  {  99u*256u, 156u*256u      },                \
  { 110u*256u, 145u*256u      },                \
  { 121u*256u, 134u*256u      }, /* 1/2 */      \
  { 138u*256u, 117u*256u      },                \
  { 153u*256u, 102u*256u      },                \
  { 163u*256u,  87u*256u      },                \
  { 182u*256u,  73u*256u      }, /* 1/4 */      \
  { 190u*256u,  65u*256u      },                \
  { 199u*256u,  56u*256u      }, /* 1/8 */      \
  { 219u*256u,  36u*256u      },                \
  { 243u*256u,  12u*256u      }, /* Empty */    \
  { 254u*256u,   0u*256u      }  /* Open Threshold */ \
}, \
{ \
  {   9u*256u, 254u*256u      }, /* Min/max */  \
  {   9u*256u, 246u*256u      }, /* Short Threshold */  \
  {  22u*256u, 233u*256u      }, /* Full */     \
  {  36u*256u, 219u*256u      },                \
  {  49u*256u, 206u*256u      },                \
  {  62u*256u, 193u*256u      },                \
  {  75u*256u, 180u*256u      }, /* 3/4 */      \
  {  87u*256u, 168u*256u      },                \
  {  99u*256u, 156u*256u      },                \
  { 110u*256u, 145u*256u      },                \
  { 121u*256u, 134u*256u      }, /* 1/2 */      \
  { 138u*256u, 117u*256u      },                \
  { 153u*256u, 102u*256u      },                \
  { 163u*256u,  87u*256u      },                \
  { 182u*256u,  73u*256u      }, /* 1/4 */      \
  { 190u*256u,  65u*256u      },                \
  { 199u*256u,  56u*256u      }, /* 1/8 */      \
  { 219u*256u,  36u*256u      },                \
  { 243u*256u,  12u*256u      }, /* Empty */    \
  { 254u*256u,   0u*256u      }  /* Open Threshold */ \
}
#endif

/* ----------------------------------------------------------------------------------
** Define the table to convert the RAD value to CAN FLPS
**
** This table is stored in Sender_A_CANFLPS_TableNVM.
**
** ----------------------------------------------------------------------------------
*/
#define FUEL03_CANFLPS_SIZE (16)
#define FUEL03_CANFLPS   \
  {  12u*256u, 255u*256u      }, /* Min/max */  \
  {  12u*256u, 255u*256u      }, /* Short   */  \
  {  24u*256u, 251u*256u      }, /* F Stop  */  \
  {  35u*256u, 242u*256u      }, /* F       */  \
  {  66u*256u, 185u*256u      }, /* 3/4     */  \
  { 110u*256u, 127u*256u      }, /* 1/2     */  \
  { 158u*256u,  70u*256u      }, /* 1/4     */  \
  { 226u*256u,  12u*256u      }, /* E       */  \
  { 241u*256u,   3u*256u      }, /* E Stop  */  \
  { 254u*256u,   1u*256u      },                \
  { 255u*256u,   0u*256u      }, /* Open    */  \
  { 255u*256u, 255u*256u      }, /* Extra   */  \
  { 255u*256u, 255u*256u      }, /* Extra   */  \
  { 255u*256u, 255u*256u      }, /* Extra   */  \
  { 255u*256u, 255u*256u      }, /* Extra   */  \
  { 255u*256u, 255u*256u      }  /* Extra   */

/* ----------------------------------------------------------------------------------
**       FUEL03 NVM LOGGING
** ----------------------------------------------------------------------------------
** Define the following if you would like log the fuel init values to NVM.
** Comment out the following if not used.
** Note: If you use this NVM logging, you need to make sure the queue size
**       in the eprom manager is big enough (EPM_Q_SIZE).
** ----------------------------------------------------------------------------------
*/
/*#define FUEL03_LOG_INIT_ERRORS_TO_NVM*/

/* ----------------------------------------------------------------------------------
** Define the number of 'records' you want to store in NVM.
** Comment out the following if not used.
** ----------------------------------------------------------------------------------
*/
/*#define FUEL03_LOG_FAULT_RECORD_SIZE 5*/

/* ----------------------------------------------------------------------------------
** Define the number of 'records' you want to store in RAM.
** Comment out the following if not used.
** ----------------------------------------------------------------------------------
*/
/*#define FUEL03_RAM_LOG_FAULT_RECORD_SIZE 5*/

/* ----------------------------------------------------------------------------------
** Define the time that the fast fill mode is enabled following a key on
** initialization that does not read the required number of good fuel
** samples. This value is the number of iterations of the Fuel03 processing.
** ----------------------------------------------------------------------------------
*/
/*#define FUEL03_AVG_VOL_INVALID_TIME 900*/

/* ----------------------------------------------------------------------------------
** Set the following to 1 to use the 8bit standard resolution or set to
** 1 to select 16 bit resolution in the slosh filter check routine. The 8 bit
** check is standard whereas the 16 bit option is used in Europe.
** ----------------------------------------------------------------------------------
*/
#define FUEL03_FILTER_RES (1)

/* ----------------------------------------------------------------------------------
** Define the rate at which the minimum fast fill counter is to be decremented:
** This constant times the rate of the fuel filter algorithm will define
** the time upto which fast fill deltas should exceed, then check to see if
** the conditions have satisfied the debounce time, and enter fast fill mode.
** This constant will be stored in 1 byte of NVM called "Fuel03MinFastFillTimeCounterNVM".
** Setting this value to "0" will disable this counter.
** ----------------------------------------------------------------------------------
*/
/*This value is configured with referenve of Hyundai TBI */
/*SGM308 minimum fast fill time is 0 sec (0*96 = 0)*/
#define FUEL03_MIN_FAST_FILL_TIME (0)


#endif    /* End of BDS definitions.  */
/*


** --------------------------------------------------------------------------
** Non-BDS defined configuration parameters
** --------------------------------------------------------------------------
*/

/*
** Define a function that returns a UINT8 value that represents the fuel
** tank configuration information that comes from the B&A SCEM byte.  This
** value must be in the format specified by the FUEL BDS, because this is
** the input value that is used in the input column of the
** "FUEL03_INDEX_TABLE" that is auto-generated by the FUEL BDS workbook.
**
** The definition of this macro will be determined by the software engineer,
** and will typically be a function from the source code file FSCEM.C.
*/
/*#define FUEL03_GET_FUEL_SCEM() (f_scem_get_fuel_scem_byte())*/

/*
** Populate the following with a function that returns 1 when the fast fill
** conditions have been met, 0 otherwise.  Set to 1 if not used.
**
** Typically, this will be a check for zero speed and/or the transmission
** in PARK.  Check your product specific CRS/CDS for requirements for
** this item.
**
** The definition of this macro will be determined by the software engineer,
** and will typically be a function from the source code file FFUEL.C.
*/
#define FUEL03_FAST_FILL_MET_MACRO() FALSE
/*(ffuel_Zero_Speed_Checking())*/

/*
** Populate the following with a function that returns TRUE when the
** 'Power Mode = Start' condition exists, i.e. ignition switch is in
** CRANK.  Set to FALSE if not used.  If this macro returns TRUE, the
** fuel filter algorithm will not be iterated after fuel init completes.
**
** Check your product specific CRS/CDS for requirements for this item.
**
** The definition of this macro will be determined by the software engineer,
** and will typically be a function from the source code file FIGSW.C.
*/
#define FUEL03_POWER_MODE_MACRO() ((BOOLEAN)FALSE)

/*
** Populate the following with a function that returns 1 when
** "valid conditions" exist for executing the fuel algorithm.
** Set to 1 if not used.
**
** Typical invalid conditions are voltage out of range, or missing
** network messages for systems that provide the fuel A/D via the
** vehicle network.
**
** The definition of this macro will be determined by the product
** specific CRS, and will typically be a function from the source
** code file FFUEL.C.
*/
#define FUEL03_VALID_CONDITION() ((BOOLEAN)TRUE)

/*
** Define the following with a function that returns TRUE when a low
** voltage condition exists. Note that this is only used by the
** "FUEL03_keyoff processing_done()" function to allow sleep to occur.
** If you don't need this, then set it to FALSE.
**
** The definition of this macro will be determined by the software engineer,
** and will typically be a function from the source code file IDD01.C.
**
** NOTE:  This should always be set to FALSE unless your product specific
**        CRS indicates otherwise.
*/
#define FUEL03_LOW_VOLTAGE() (FALSE)

/*
** Define the following macros if you require these PIDs in your system.
** Whether or not to enable these PIDs can be determined by reviewing
** the PID section of the product specific Part II diagnostic spec.
**
** IMPORTANT:  Don't define the PIDs associated with the second sender
**             if you only have a single sender system!  If you do,
**             the code will not compile.
**
** C903: fuel sender 1 -- number of good samples taken at init
** C904: fuel sender x -- number of good samples required (NVM)
** C909: fuel sender 1 -- average of all good init samples
** C90A: fuel init ref -- reference used at init and value
** 6185: Fuel Level Analog Input Status #1
**
**
** NOTE:  If FUEL03_LOG_INIT_ERRORS_TO_NVM is enabled, the following
**        PIDs will automatically be supported and must be added to
**        your diagnostic config file:
**
** PID C90E: 4 byte pointer to RAM buffer containing fuel init information
**           (will only need 2 bytes for Mako micros, but will need more for
**           other micros)
** PID C90F: 2 byte size of RAM buffer in PID C90E
** PID C910: 4 byte pointer to NVM buffer containing fuel init information
**           (will only need 2 bytes for Mako micros, but will need more for
**           other micros)
** PID C911: 2 byte size of NVM buffer in PID C910
*/
/*#define FUEL03_NEED_PID_C903*/
/*#define FUEL03_NEED_PID_C904*/
/*#define FUEL03_NEED_PID_C909*/
/*#define FUEL03_NEED_PID_C90A*/
/*#define FUEL03_NEED_PID_6185*/

/*
** Define the following if you would like the DTC logging to be active in
** the key on periodic processing.  Comment it out if you want to log
** DTCs yourself (not recommended).
**
** Whether or not you require DTCs to be logged can be determined by
** reviewing the DTC section of the product specific Part II diagnostic
** spec.
*/
/*#define FUEL03_NEED_DTC_LOGGING*/

/*
** Define the following if you would like to control when the DTC logging
** is active.  Set to TRUE if it's always valid.  This can be used to
** disable DTC logging in CRANK or other modes.
**
** When to log DTCs can be found by reviewing the product specific CRS/CDS
** and/or the DTC section of the product specific Part II diagnostic spec.
*/
#define FUEL03_DTC_LOGGING_ACTIVE() ((BOOLEAN)0)

/*
** If you defined FUEL03_NEED_DTC_LOGGING or FUEL03_NEED_DIAG_SELF_TEST,
** then populate the following with your product specific functions for
** logging sender open or short DTCs.
**
** NOTE:  The CLR macro should always be set to the "KernelErrorNotPresent"
**        function.
*/
#define FUEL03_LOG_FUEL_SENDER_CKT_OPEN()    
#define FUEL03_CLR_FUEL_SENDER_CKT_OPEN()    

#define FUEL03_LOG_FUEL_SENDER_CKT_SHORT()   
#define FUEL03_CLR_FUEL_SENDER_CKT_SHORT()   

/*
** Define the following if you require a diagnostic self test function
** in your system.  If so, you must define the "GET..." macros that will
** return the current raw fuel A/D for Sender A and/or B.  The "GET..."
** macro for sender 2 is not needed in single sender systems.
**
** If FUEL03_NEED_DIAG_EPILOG is defined, the FUEL03_KSDiagStartSelfTest()
** function is included when fuel03.c is compiled and it is the
** responsibility of the application to call it by adding it to
** the appropriate diagnostic function list.
*/
/*#define FUEL03_NEED_DIAG_SELF_TEST*/
/*#define FUEL03_GET_LEVEL_SENDER_A() (f_fuel_get_sender_a_ad())*/

/*
** Define the following if you require a diagnostic epilog function in your
** system.  This function will restart fuel init when exiting diagnostic mode.
**
** If FUEL03_NEED_DIAG_EPILOG is defined, the FUEL03_KSDiagEpilog() function
** is included when FUEL03.c is compiled and it is the responsibility of the
** application to call it by adding it to the appropriate diagnostic function
** list.
*/
/*#define FUEL03_NEED_DIAG_EPILOG*/


/* ============================================================================
**
**  $Revision:   1.8  $
**
** ============================================================================
**  P V C S    R E V I S I O N    N O T E S
** ----------------------------------------------------------------------------
**  For each change to this file, be sure to record:
**  1.  who made the change and when the change was made
**  2.  why the change was made and the intended result
**
**  Date         By      Reason for Change
**  mmm/dd/yy    XXX     -----------------
**
** ----------------------------------------------------------------------------
**  3/30/07     JARUN  BSDI00044140 Added a new config item
**                       for Fast fill change.
**
**  03/01/2007   JARUN   Added compiler switch for the
**     inclusion of "fuel03_bds.cfg" for backward compatibility.
**
**  Clearcase  6/15/05  RRUSS1
**
**  Ref BSDI00020125 : Removed the defines for the logging feature.
**
**  PVCS Rev 1.7
**  10/29/03     RRUSS1  Changed names of config items per review comments
**                       pertaining to the .cfg file.
**
**  PVCS Rev 1.0  10/14/03     RRUSS1
**
**  Initial version.
**
** ==========================================================================*/

/* end of file =============================================================*/
/*---------------------------------------------------------------------------
Date              : 11-DEC-07
CDSID             : gmathiva
Traceability      : SGM308_Gauges_Reqiurement&Design_Capture.xls
Change Description: Initial release.
-----------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------
Date              : 12-Feb-07
CDSID             : spratap
Traceability      : SGM308_Gauges_Reqiurement&Design_Capture.xls
Change Description: Damping Ratio modified as per SCR#3.
-----------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------
Date              : 22-May-08
CDSID             : fzhang
Traceability      : srd2.0
Change Description: Damping Ratio modified as per SRD.change fast damping time to 10s.
-----------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------
Date              : 29-May-08
CDSID             : gmathiva
Traceability      : Reference CQ BSDI00056927 ,for fuel bar display flickering issue
Change Description: Added the hysteris value in the FUEL03_PERCENT_FULL_NEGATIVE_HYST 
                    & FUEL03_PERCENT_FULL_POSITIVE_HYST macro 
-----------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------
Date              : 6-Jun-08
CDSID             : gmathiva
Traceability      : Reference CQ BSDI00058244 ,for fuel bar 8th segment is not geting ON
Change Description: Changed the flps value as 240 for 8th segment
-----------------------------------------------------------------------------*/


